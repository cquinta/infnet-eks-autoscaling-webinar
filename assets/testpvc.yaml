# ===================================================================
#  1. PersistentVolumeClaim (PVC)
#  Define a solicitação de armazenamento do tipo 'efs-prometheus'.
# ===================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # Nome do PVC que será referenciado pelo Deployment
  name: ubuntu-data-pvc
spec:
  # Nome exato do StorageClass que deve provisionar este volume
  storageClassName: efs-prometheus
  # Modos de acesso. EFS geralmente suporta ReadWriteMany (RWX),
  # permitindo que múltiplos pods leiam e escrevam no volume.
  accessModes:
    - ReadWriteMany
  # Recursos de armazenamento solicitados.
  resources:
    requests:
      storage: 5Gi # Solicita um volume de 5 GiB

---

# ===================================================================
#  2. Deployment
#  Define o deploy que irá usar o PVC criado acima.
# ===================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ubuntu-deployment
  labels:
    app: ubuntu-efs-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ubuntu-efs-storage
  template:
    metadata:
      labels:
        app: ubuntu-efs-storage
    spec:
      # ==============================================================
      #  Definição do Volume para o Pod
      #  Conecta o PVC 'ubuntu-data-pvc' a um volume lógico no Pod
      #  chamado 'data-storage'.
      # ==============================================================
      volumes:
        - name: data-storage # Um nome interno para o volume no Pod
          persistentVolumeClaim:
            # O nome do PVC que criamos na primeira parte do manifesto
            claimName: ubuntu-data-pvc
            
      # ==============================================================
      #  Definição do Contêiner
      # ==============================================================
      containers:
        - name: ubuntu-container
          image: ubuntu:latest
          # Comando para manter o contêiner rodando. Sem isso,
          # um contêiner Ubuntu padrão irá iniciar e parar imediatamente.
          # Este comando escreve a data no arquivo /data/log.txt a cada 30s.
          command: ["/bin/bash", "-c"]
          args:
            - >
              while true; do
                echo "Data e hora: $(date)" >> /data/log.txt;
                echo "Conteúdo de /data:";
                ls -l /data;
                sleep 30;
              done
          # ==============================================================
          #  Montagem do Volume
          #  Monta o volume 'data-storage' (conectado ao PVC) no
          #  diretório '/data' dentro do contêiner.
          # ==============================================================
          volumeMounts:
            - name: data-storage # Deve ser o mesmo nome do volume definido acima
              mountPath: /data # O diretório de destino dentro do contêiner